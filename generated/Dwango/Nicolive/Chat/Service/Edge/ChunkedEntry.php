<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dwango/nicolive/chat/service/edge/ChunkedEntry.proto

namespace Dwango\Nicolive\Chat\Service\Edge;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 **
 * ストリーミング配信されてくる各チャンク。
 * 開始時刻を指定してサーバーへストリームをリクエストすると、開始時刻から一定時間内に発生したメッセージがすべてチャンクとして送られてくる。
 * 開始時刻が過去の時刻の場合は指定時間内のすべてのチャンクが一瞬で送られてきて接続がすぐに終了する。
 * 開始時刻が現在の時刻の場合は一定時間の間接続が開いたままとなり、発生したメッセージがリアルタイムにストリームで送られてくる。
 *
 * Generated from protobuf message <code>dwango.nicolive.chat.service.edge.ChunkedEntry</code>
 */
class ChunkedEntry extends \Google\Protobuf\Internal\Message
{
    protected $entry;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Dwango\Nicolive\Chat\Service\Edge\MessageSegment $segment
     *     @type \Dwango\Nicolive\Chat\Service\Edge\BackwardSegment $backward
     *     @type \Dwango\Nicolive\Chat\Service\Edge\MessageSegment $previous
     *     @type \Dwango\Nicolive\Chat\Service\Edge\ChunkedEntry\ReadyForNext $next
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Dwango\Nicolive\Chat\Service\Edge\ChunkedEntry::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.dwango.nicolive.chat.service.edge.MessageSegment segment = 1;</code>
     * @return \Dwango\Nicolive\Chat\Service\Edge\MessageSegment
     */
    public function getSegment()
    {
        return $this->readOneof(1);
    }

    /**
     * Generated from protobuf field <code>.dwango.nicolive.chat.service.edge.MessageSegment segment = 1;</code>
     * @param \Dwango\Nicolive\Chat\Service\Edge\MessageSegment $var
     * @return $this
     */
    public function setSegment($var)
    {
        GPBUtil::checkMessage($var, \Dwango\Nicolive\Chat\Service\Edge\MessageSegment::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.dwango.nicolive.chat.service.edge.BackwardSegment backward = 2;</code>
     * @return \Dwango\Nicolive\Chat\Service\Edge\BackwardSegment
     */
    public function getBackward()
    {
        return $this->readOneof(2);
    }

    /**
     * Generated from protobuf field <code>.dwango.nicolive.chat.service.edge.BackwardSegment backward = 2;</code>
     * @param \Dwango\Nicolive\Chat\Service\Edge\BackwardSegment $var
     * @return $this
     */
    public function setBackward($var)
    {
        GPBUtil::checkMessage($var, \Dwango\Nicolive\Chat\Service\Edge\BackwardSegment::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.dwango.nicolive.chat.service.edge.MessageSegment previous = 3;</code>
     * @return \Dwango\Nicolive\Chat\Service\Edge\MessageSegment
     */
    public function getPrevious()
    {
        return $this->readOneof(3);
    }

    /**
     * Generated from protobuf field <code>.dwango.nicolive.chat.service.edge.MessageSegment previous = 3;</code>
     * @param \Dwango\Nicolive\Chat\Service\Edge\MessageSegment $var
     * @return $this
     */
    public function setPrevious($var)
    {
        GPBUtil::checkMessage($var, \Dwango\Nicolive\Chat\Service\Edge\MessageSegment::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.dwango.nicolive.chat.service.edge.ChunkedEntry.ReadyForNext next = 4;</code>
     * @return \Dwango\Nicolive\Chat\Service\Edge\ChunkedEntry\ReadyForNext
     */
    public function getNext()
    {
        return $this->readOneof(4);
    }

    /**
     * Generated from protobuf field <code>.dwango.nicolive.chat.service.edge.ChunkedEntry.ReadyForNext next = 4;</code>
     * @param \Dwango\Nicolive\Chat\Service\Edge\ChunkedEntry\ReadyForNext $var
     * @return $this
     */
    public function setNext($var)
    {
        GPBUtil::checkMessage($var, \Dwango\Nicolive\Chat\Service\Edge\ChunkedEntry_ReadyForNext::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getEntry()
    {
        return $this->whichOneof("entry");
    }

}

